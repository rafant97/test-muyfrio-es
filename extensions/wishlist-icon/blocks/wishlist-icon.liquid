
<h1 style="text-align: center">¿Cuando quieres recibir tu pedido?</h1>
<div class="calendar">
        <div class="calendar-header">
            <button id="prevBtn" class="calendar-btn">-</button>
            <h2 id="currentMonth"></h2>
            <button id="nextBtn" class="calendar-btn">+</button>
        </div>
        <div id="calendarBody" class="calendar-body"></div>
</div>

<style>

    .calendar{
        width: 300px;
        background-color: #fff;
        margin: 0 auto;
        font-family: Arial, sans-serif;
        border-radius: 5px;
        box-shadow: 0 10px 29px -7px rgba(63,63,63,0.48);
    }

    .calendar-header{
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    .calendar-header button{
        background-color: transparent;
        border: none;
        cursor: pointer;
        font-size: 18px;
    }

    .calendar-body{
        display: grid;
        grid-template-columns: repeat(7,1fr);
    }

    .calendar-day{
        border: 1px solid #fff;
        border-radius: 50%;
        padding: 5px;
        margin: 5px;
        text-align: center;
        cursor: pointer;
    }

    .calendar-day:hover{
        background-color: #ddd !important;
        transition: background-color 0.3s ease;
    }

    .calendar-day.selected{
        border: 1px solid #003879d0;
        background-color: rgba(70,201,240);
    }

    .calendar-day.range{
        border: 1px solid #007900d0;
        background-color: rgba(86,238,86);
    }

    #prevBtn, #nextBtn{
        width: 40px;
        height: 40px;
        padding: 10px;
        margin: 0 10px 0 10px;
        border-radius: 50%;
        background-color: #fff;
        font-size: 24px;
    }

    #prevBtn:hover{
        background-color: #ddd !important;
        transition: background-color 0.3s ease;
    }

    #nextBtn:hover{
        background-color: #ddd !important;
        transition: background-color 0.3s ease;
    }

    #currentMonth{
        font-family: 'Poppins';
        font-size: 18px;
    }

    .calendar-day.today {
    background-color: #ff0; /* Fondo amarillo para el día actual */
    }

    .calendar-day.selected {
    background-color: #0f0; /* Fondo verde para el día seleccionado */
    }

    .calendar-day.past-date {
    color: #ccc; /* Color gris para los días pasados */
    pointer-events: none; /* Deshabilitar clic en días pasados */
    }


</style>



<script>
  let serverDiaSemana;
  let serverHora;

  function testProxy() {
    return new Promise((resolve, reject) => {
      fetch(""),{
        method: 'POST',
        redirect: 'manual',
        headers: {
          'Content-Type': 'application/json',
          'Access-Control-Allow-Origin': '*',
        }
      }
    }).then(response => {
      console.log(response)
    }).then(data => {
      console.log(data)
    }).catch(error => {
      console.log(error)
    })
  }

  testProxy();

  const currentDate = new Date();
  let currentMonth = currentDate.getMonth();
  let currentYear = currentDate.getFullYear();
  let selectedDate = null; // Para almacenar la fecha seleccionada
  
  const calendarBody = document.getElementById('calendarBody');
  const currentMonthElement = document.getElementById('currentMonth');
  
  const prevBtn = document.getElementById('prevBtn');
  const nextBtn = document.getElementById('nextBtn');

  //TODO: COMPROBAR SI ESTÁ EL RECARGO EN EL CARRITO PARA ELIMINARLO
  

  //TODO: VALIDACIÓN SI NO HA SELECCIONADO FECHA
  const checkoutButton = document.querySelector('#checkout')
  checkoutButton.style.pointerEvents = 'none';
  checkoutButton.addEventListener('click', validarCheckout)

  function validarCheckout() {
    if(selectedDate === null) {
        const contenedorCheckoutButton = document.querySelector('.cart__ctas')
        checkoutButton.style.flexDirection = 'column';
        const divMSJ = document.createElement("div")
        divMSJ.innerText = "Selecciona un día de entrega"
        contenedorCheckoutButton.appendChild(divMSJ)
    }
  }

  prevBtn.addEventListener('click', () => {
      currentMonth--;
      renderCalendar();
  });
  nextBtn.addEventListener('click', () => {
      currentMonth++;
      renderCalendar();
  });

  

  function renderCalendar() {
      const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();
      const firstDayIndex = new Date(currentYear, currentMonth, 1).getDay();
  
      currentMonthElement.textContent = new Date(currentYear, currentMonth).toLocaleDateString('default', { month: 'long', year: 'numeric' });
  
      let days = '';
  
      for (let i = 1; i <= firstDayIndex; i++) {
          days += `<div class="calendar-day"></div>`;
      }
  
      for (let i = 1; i <= daysInMonth; i++) {
          const date = new Date(currentYear, currentMonth, i);
          const className = getDayClassName(date);
          const isPastDate = date < currentDate && date.toDateString() !== currentDate.toDateString();
          const isSundayOrMonday = date.getDay() === 0 || date.getDay() === 1;
  
          if (isPastDate || isSundayOrMonday) {
              days += `<div class="calendar-day ${className} past-date">${i}</div>`;
          } else {
              days += `<div class="calendar-day ${className}" onclick="selectDate(${i})">${i}</div>`;
          }
      }
      
  
      calendarBody.innerHTML = days;
  }
  
  function selectDate(day) {
      selectedDate = new Date(currentYear, currentMonth, day);
      checkoutButton.style.pointerEvents = 'auto';
  
      console.log(`Selected date: ${formatDate(selectedDate)}`);
      //Comprobar si la fecha seleccionada es sabado
      if (selectedDate.getDay() === 6) { 
          console.log('Has seleccionado un sábado');
          console.log("{{ product.variants.first.id }}")

          //Comprobar si el recargo está en el carrito
          getCartItems().then(cart => {
            // Aquí accedes a los elementos del carrito
            let recargoExists = cart.items.some(item => item.variant_id === 49131205362003);
            if (recargoExists) {
                console.log('El recargo ya existe en el carrito');
              } else {
                console.log('Añadiendo el recargo');
                addRecargoToCart();

                // Añadir la fecha seleccionada como nota en el carrito
                updateCartNote();
              }
          });
      }
      renderCalendar();
  }

  function updateCartNote() {
    let formData = {
      'note': `Fecha de entrega: ${formatDate(selectedDate)}`
    };

    fetch(window.Shopify.routes.root + 'cart/update.js', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(formData)
    })
    .then(response => {
      return response.json();
    })
    .catch((error) => {
      console.error('Error:', error);
    });
  }

  function addRecargoToCart() {
    console.log('Añadiendo el recargo')
    let formData = {
        'items': [{
         'id': 49131205362003,
         'quantity': 1,
          'properties':{'Fecha de Entrega': formatDate(selectedDate)}
        }]
    };
       
    fetch(window.Shopify.routes.root + 'cart/add.js', {
         method: 'POST',
         headers: {
           'Content-Type': 'application/json'
         },
         body: JSON.stringify(formData)
    })
    .then(response => {
         return response.json();
    })
    .catch((error) => {
         console.error('Error:', error);
    });
  }

  async function getCartItems() {
        try {
        const response = await fetch(window.Shopify.routes.root + 'cart.js');
        const data = await response.json();
        return data;
        } catch (error) {
        console.error('Error:', error);
        }
    }
  
  
  function getDayClassName(date) {
      if (date.toDateString() === currentDate.toDateString()) {
          return 'today';
      }
      if (selectedDate && date.toDateString() === selectedDate.toDateString()) {
          return 'selected';
      }
      return '';
  }
  
  function formatDate(date) {
      return `${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()}`;
  }
  
  renderCalendar();
  
</script>

{% schema %}
{
  "name": "Wishlist icon",
  "target": "section",
  "settings": [
    {
      "type": "product",
      "id": "product",
      "label": "product",
      "autofill": true
    },
    {
      "type": "text",
      "id": "text",
      "label": "Text",
      "default": "Add to wishlist"
    },
    {
      "type": "color",
      "id": "colour",
      "label": "Icon Colour",
      "default": "#ff0000"
    }
  ]
}
{% endschema %}