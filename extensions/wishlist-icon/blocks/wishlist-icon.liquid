
<h1 style="text-align: center">¿Cuando quieres recibir tu pedido?</h1>
<div class="calendar">
    <div class="calendar-header">
        <button id="prevBtn" class="calendar-btn">-</button>
        <h2 id="currentMonth"></h2>
        <button id="nextBtn" class="calendar-btn">+</button>
    </div>
    <!-- Contenedor para los días de la semana -->
    <div id="weekdays" class="calendar-weekdays"></div>
    <div id="calendarBody" class="calendar-body"></div>
</div>

<style>

  .calendar{
      width: 300px;
      background-color: #fff;
      margin: 0 auto;
      font-family: Arial, sans-serif;
      border-radius: 5px;
      box-shadow: 0 10px 29px -7px rgba(63,63,63,0.48);
  }

  .calendar-header{
      display: flex;
      align-items: center;
      justify-content: space-between;
  }

  .calendar-header button{
      background-color: transparent;
      border: none;
      cursor: pointer;
      font-size: 18px;
  }

  .calendar-body{
      display: grid;
      grid-template-columns: repeat(7,1fr);
  }

  .calendar-day{
      border: 1px solid #fff;
      border-radius: 50%;
      padding: 5px;
      margin: 5px;
      text-align: center;
      cursor: pointer;
  }

  .calendar-day:hover{
      background-color: #ddd !important;
      transition: background-color 0.3s ease;
  }

  .calendar-day.selected{
      border: 1px solid #003879d0;
      background-color: rgba(70,201,240);
  }

  .calendar-day.range{
      border: 1px solid #007900d0;
      background-color: rgba(86,238,86);
  }

  #prevBtn, #nextBtn{
      width: 40px;
      height: 40px;
      padding: 10px;
      margin: 0 10px 0 10px;
      border-radius: 50%;
      background-color: #fff;
      font-size: 24px;
  }

  #prevBtn:hover{
      background-color: #ddd !important;
      transition: background-color 0.3s ease;
  }

  #nextBtn:hover{
      background-color: #ddd !important;
      transition: background-color 0.3s ease;
  }

  #currentMonth{
      font-family: 'Poppins';
      font-size: 18px;
  }

  .calendar-day.today {
  background-color: #ff0; /* Fondo amarillo para el día actual */
  }

  .calendar-day.selected {
  background-color: #0f0; /* Fondo verde para el día seleccionado */
  }

  .calendar-day.past-date {
  color: #ccc; /* Color gris para los días pasados */
  pointer-events: none; /* Deshabilitar clic en días pasados */
  }

  .calendar-weekdays {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    background-color: #f5f5f5;
    text-align: center;
    font-weight: bold;
    padding: 10px 0;
  }
  
  .calendar-weekdays .weekday {
      padding: 5px 0;
  }

.calendar-day.today {
  background-color: #ff0; /* Fondo amarillo para el día actual */
  cursor: not-allowed;
  pointer-events: none; /* Deshabilita la selección */
}


</style>



<script>
  let serverDiaSemana;
  let serverHora;
  let serverVacaciones;

  //Para probar distintas horas
  const testMode = false;
  let testDate = new Date(2024, 7, 20, 16, 0);

  // Actualizamos la función para que solo llame a renderCalendar cuando serverHora esté disponible.
  async function testProxy() {
  try {
    const response = await fetch("https://www.comprarhieloseco.es/apps/proxytest", {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(`Error: ${errorData.error}`);
    }

    const data = await response.json();
    console.log(data.jsonData);
    const { diaSemana, hora, vacaciones } = data.jsonData;
    serverDiaSemana = Number(diaSemana);
    serverHora = hora;
    serverVacaciones = JSON.parse(vacaciones);
    console.log('días vacaciones: ', serverVacaciones)

    // Ahora que tenemos serverHora, llamamos a renderCalendar.
    renderCalendar();

  } catch (error) {
    console.error('Error fetching data:', error);
  }
  }

  testProxy();

  const currentDate = testMode ? testDate : new Date();
  //console.log('Hora actual:', currentDate)
  let currentMonth = currentDate.getMonth();
  let currentYear = currentDate.getFullYear();
  let selectedDate = null; // Para almacenar la fecha seleccionada

  const calendarBody = document.getElementById('calendarBody');
  const currentMonthElement = document.getElementById('currentMonth');

  const prevBtn = document.getElementById('prevBtn');
  const nextBtn = document.getElementById('nextBtn');

  //TODO: COMPROBAR SI ESTÁ EL RECARGO EN EL CARRITO PARA ELIMINARLO

  //TODO: VALIDACIÓN SI NO HA SELECCIONADO FECHA
  const checkoutButton = document.querySelector('#checkout');
  checkoutButton.style.pointerEvents = 'none';
  checkoutButton.addEventListener('click', validarCheckout);

  function validarCheckout() {
  if (selectedDate === null) {
    const contenedorCheckoutButton = document.querySelector('.cart__ctas');
    checkoutButton.style.flexDirection = 'column';
    const divMSJ = document.createElement("div");
    divMSJ.innerText = "Selecciona un día de entrega";
    contenedorCheckoutButton.appendChild(divMSJ);
  }
  }

  prevBtn.addEventListener('click', () => {
  currentMonth--;
  renderCalendar();
  });
  nextBtn.addEventListener('click', () => {
  currentMonth++;
  renderCalendar();
  });

  function parseDate(str) {
    const [day, month, year] = str.split('/').map(Number);
    return new Date(year, month - 1, day); // Restamos 1 al mes porque los meses en Date van de 0 a 11
  }


  function renderCalendar() {
    if (!serverHora) {
        console.warn("serverHora no está definida todavía.");
        return; // Salimos de la función si serverHora no está definida.
    }

    // Días de la semana
    const weekDays = ['L', 'M', 'M', 'J', 'V', 'S', 'D'];
    const weekDaysHTML = weekDays.map(day => `<div class="weekday">${day}</div>`).join('');
    document.getElementById('weekdays').innerHTML = weekDaysHTML;

    const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();
    let firstDayIndex = new Date(currentYear, currentMonth, 1).getDay();
    firstDayIndex = (firstDayIndex === 0) ? 6 : firstDayIndex - 1; // Ajustar para que lunes sea 0 y domingo 6

    currentMonthElement.textContent = new Date(currentYear, currentMonth).toLocaleDateString('default', { month: 'long', year: 'numeric' });

    let days = '';

    const currentHour = currentDate.getHours();
    const currentMinutes = currentDate.getMinutes();

    const objetoHoraLimite = new Date();
    const [cutOffHour, cutOffMinutes] = serverHora.split(":").map(Number); // Aseguramos que serverHora esté inicializada.
    objetoHoraLimite.setHours(cutOffHour);
    objetoHoraLimite.setMinutes(cutOffMinutes);

    // Convertir serverVacaciones a objetos Date
    const vacacionesDates = serverVacaciones.map(dateStr => parseDate(dateStr));

    // Añadir días vacíos antes del primer día del mes
    for (let i = 0; i < firstDayIndex; i++) {
        days += `<div class="calendar-day"></div>`;
    }

    for (let i = 1; i <= daysInMonth; i++) {
        const date = new Date(currentYear, currentMonth, i);
        const className = getDayClassName(date);
        const isToday = date.toDateString() === currentDate.toDateString();
        const isPastDate = date < currentDate && !isToday;
        const isSundayOrMonday = date.getDay() === 0 || date.getDay() === 1;

        const isVacationDay = vacacionesDates.some(vacationDate => 
            vacationDate.getDate() === date.getDate() &&
            vacationDate.getMonth() === date.getMonth() &&
            vacationDate.getFullYear() === date.getFullYear()
        );

        let isAfterCutoff = false;
        if (currentDate.getDate() === date.getDate() - 1 && (currentHour > cutOffHour || (currentHour === cutOffHour && currentMinutes > cutOffMinutes))) {
            isAfterCutoff = true;
        }

        if (isPastDate || isSundayOrMonday || isAfterCutoff || isVacationDay || isToday) {
            days += `<div class="calendar-day ${className} past-date">${i}</div>`;
        } else {
            days += `<div class="calendar-day ${className}" onclick="selectDate(${i})">${i}</div>`;
        }
    }

    calendarBody.innerHTML = days;
}






  function selectDate(day) {
  selectedDate = new Date(currentYear, currentMonth, day);
  checkoutButton.style.pointerEvents = 'auto';

  console.log(`Selected date: ${formatDate(selectedDate)}`);
  console.log('dia semana:', serverDiaSemana)
  if (selectedDate.getDay() == serverDiaSemana) { 
    console.log('Has seleccionado un sábado');

    getCartItems().then(cart => {
      let recargoExists = cart.items.some(item => item.variant_id === 49131205362003);
      if (!recargoExists) {
        addRecargoToCart();
        updateCartNote();
      }
    });
  }
  renderCalendar();
  }

  function updateCartNote() {
  let formData = {
    'note': `Fecha de entrega: ${formatDate(selectedDate)}`
  };

  fetch(window.Shopify.routes.root + 'cart/update.js', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify(formData)
  })
  .then(response => response.json())
  .catch((error) => {
    console.error('Error:', error);
  });
  }

  function addRecargoToCart() {
    console.log('Añadiendo el recargo');
    let formData = {
      'items': [{
        'id': 49131205362003,
        'quantity': 1,
        'properties': {'Fecha de Entrega': formatDate(selectedDate)}
      }]
    };

    fetch(window.Shopify.routes.root + 'cart/add.js', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(formData)
    })
    .then(response => response.json())
    .catch((error) => {
      console.error('Error:', error);
    });
  }

  function formatDate(date) {
    const day = String(date.getDate()).padStart(2, '0'); // Obtiene el día y lo formatea a dos dígitos
    const month = String(date.getMonth() + 1).padStart(2, '0'); // Obtiene el mes y lo formatea a dos dígitos (recordando que los meses van de 0 a 11)
    const year = date.getFullYear(); // Obtiene el año

    return `${day}/${month}/${year}`; // Devuelve la fecha en formato "dd/mm/yyyy"
  }

  async function getCartItems() {
    try {
      const response = await fetch(window.Shopify.routes.root + 'cart.js');
      const data = await response.json();
      return data;
    } catch (error) {
      console.error('Error:', error);
    }
  }

  function getDayClassName(date) {
    if (date.toDateString() === currentDate.toDateString()) {
        return 'today';
    }
    if (selectedDate && date.toDateString() === selectedDate.toDateString()) {
        return 'selected';
    }
    return '';
  }


</script>

{% schema %}
{
  "name": "Wishlist icon",
  "target": "section",
  "settings": [
    {
      "type": "product",
      "id": "product",
      "label": "product",
      "autofill": true
    },
    {
      "type": "text",
      "id": "text",
      "label": "Text",
      "default": "Add to wishlist"
    },
    {
      "type": "color",
      "id": "colour",
      "label": "Icon Colour",
      "default": "#ff0000"
    }
  ]
}
{% endschema %}