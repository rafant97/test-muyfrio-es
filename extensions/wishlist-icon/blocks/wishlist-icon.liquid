{% comment %}theme-check-disable UnusedAssign{% endcomment %}
{% comment %} --------------------->CODIGO DE ELIMINACIÓN DE RECARGO PARA SABADOS<--------{% endcomment %}
{% comment %}Este código previene que se solapen los recargos si el cliente decide retroceder tras el checkout{% endcomment %}
{% for item in cart.items %}
  {% if item.product.variants.first.id == 49131205362003 %}
      <div><h1>Hay recargo en el carrito</h1></div><br>
      <script>
        console.log("Eliminando recargo")
        window.location.href = "https://www.comprarhieloseco.es/{{ item.url_to_remove }}";
        fetch(window.Shopify.routes.root + '{{ item.url_to_remove }}', {
             method: 'GET',
             headers: {
               'Content-Type': 'application/json'
             },
             body: ''
        })
      </script>
  {% endif %}
{% endfor %}
{%- unless settings.catalog_mode -%}
{%- liquid
  assign layout = 'main-cart-items'

  if "ar he hi" contains localization.language.iso_code
    assign rtl = '-rtl'
  endif

  assign store_width = settings.container_max_width

  if section.settings.section_width == 'custom'
    assign store_width = section.settings.container_max_width
  endif

  if template.suffix contains 'store-width-'
    assign store_width = template.suffix | split: 'store-width-' | last | plus: 0
  endif
-%}
{{ 'product-accordion' | append: rtl | append: '.css' | asset_url | stylesheet_tag }}
{{ 'cart-page' | append: rtl | append: '.css' | asset_url | stylesheet_tag }}
<cart-items class="page-width{% if cart == empty %} is-empty{% endif %}" id="main-cart-items" data-id="{{ section.id }}">
  <div class="holder mt-global" {% render 'section-style', section: section %}>
    <div class="container show-on-scroll">
      <div class="js-contents-cart-items-empty">
        <div class="cart-empty text-center">
          <div class="cart-empty-icon">
            {% render 'icon-empty-cart' %}
          </div>
          <h2 class="cart-empty-title">{{ 'theme-sections.sections.cart.empty' | t }}</h2>
          <div class="cart-empty-text">{{ 'theme.general.empty_description' | t }}</div>
          <div class="mt-3">
            <a href="{{ routes.all_products_collection_url }}" class="btn btn--showmore">{{ 'general.continue_shopping' | t }}</a>
          </div>
        </div>
      </div>

      <div class="row vert-margin-middle">
        <div class="col-xl-8 aside aside--content">
          <div class="js-contents-cart-items">
            <div class="cart-table-page-title align-items-center d-flex mb-2">
              <h1 class="h1-style col-auto m-0">{{ 'theme-sections.sections.cart.title' | t }}</h1>
              {% render 'free-shipping-status' layout: layout %}
            </div>
            <form action="{{ routes.cart_url }}" class="critical-hidden" method="post" id="cart">
              <div data-id="{{ section.id }}">
                {%- if cart != empty -%}
                  <div class="cart-table border-bottom-0" id="cartTable">
                    <div class="visually-hidden">{{ 'theme-sections.sections.cart.title' | t }}</div>
                    {%- for item in cart.items -%}
                      <div class="cart-table-prd" id="CartItem-{{ item.index | plus: 1 }}">
                        <div class="cart-table-prd-image {% unless item.image %}d-none{% endunless %}">
                          {% if item.image %}
                            <a href="{{ item.url }}">
                              {% render 'image-container',
                                image: item.image,
                                product_aspect_ratio: true,
                                padding_no_bg: 120,
                                sizes: '100px',
                                width_times: 3
                              %}
                            </a>
                            {%- if item.selling_plan_allocation != nil -%}
                              <div class="subscription-label">{{ 'theme.general.badge_cart_subscription' | t }}</div>
                            {%- endif -%}
                          {% endif %}
                        </div>
                        <div class="cart-table-prd-content-wrap">
                          <div class="cart-table-prd-info">
                            {%- if section.settings.show_vendor -%}
                              <p class="cart-table-vendor">{{ item.product.vendor }}</p>
                            {%- endif -%}
                            <h2 class="cart-table-prd-name">
                              <a href="{{ item.url }}">{{ item.product.title | escape }}</a>
                            </h2>
                            {%- if item.product.has_only_default_variant == false or item.properties.size != 0 -%}
                              <dl>
                                {%- if item.product.has_only_default_variant == false -%}
                                  {%- for option in item.options_with_values -%}
                                    <div class="cart-table-product-option">
                                      <dt>{{ option.name }}:</dt>
                                      <dd>{{ option.value }}</dd>
                                    </div>
                                  {%- endfor -%}
                                {%- endif -%}
                                {%- for property in item.properties -%}
                                  {%- assign property_first_char = property.first | slice: 0 -%}
                                  {%- if property.last != blank and property_first_char != '_' -%}
                                    <div class="cart-table-product-option">
                                      <dt>{{ property.first }}:</dt>
                                      <dd>
                                        {%- if property.last contains '/uploads/' -%}
                                          <a href="{{ property.last }}" class="link" target="_blank">
                                            {{ property.last | split: '/' | last }}
                                          </a>
                                        {%- else -%}
                                          {{ property.last }}
                                        {%- endif -%}
                                      </dd>
                                    </div>
                                  {%- endif -%}
                                {%- endfor -%}
                              </dl>
                            {%- endif -%}
                            {%- if item.selling_plan_allocation.selling_plan.name != blank -%}
                              <p class="prd-prepay-text"  data-tippy-placement="bottom" data-tippy-content="{{ item.selling_plan_allocation.selling_plan.description | escape }}">{{ item.selling_plan_allocation.selling_plan.name }}</p>
                            {%- endif -%}
                          </div>
                          <div class="cart-table-prd-price">
                            {% render 'main-cart-item-component-price', item: item %}
                          </div>
                          <div class="cart-table-prd-qty" data-node-desktop>
                            {% render 'quantity',
                              item: item,
                              name: 'updates[]',
                              value: item.quantity,
                              min: 0,
                              in_cart: true,
                              product_title: item.product.title
                            %}
                          </div>
                          <div class="cart-table-prd-price-total position-relative">
                            {% render 'main-cart-item-component-final-price', item: item %}
                          </div>
                        </div>
                        <div class="cart-table-prd-action">
                          <cart-remove-button data-index="{{ item.index | plus: 1 }}">
                            <a href="{{ item.url_to_remove }}" class="cart-table-prd-remove position-relative" aria-label="{{ 'theme-sections.sections.cart.remove_title' | t: title: item.title }}" title="{{ 'theme-sections.sections.cart.remove_title' | t: title: item.title }}">{% render 'icon-remove2' %}
                              <div class="loading-overlay__spinner hidden">
                                <div data-load="loading"></div>
                              </div>
                            </a>
                          </cart-remove-button>
                        </div>
                        <div class="cart-table-prd-discount">
                          <ul class="discounts list-unstyled" role="list" aria-label="{{ 'customer.order.discount' | t }}">
                            {%- for discount in item.discounts -%}
                              <li class="discounts__discount">
                                {%- render 'icon-discount' -%}
                                {{ discount.title }}
                              </li>
                            {%- endfor -%}
                          </ul>
                        </div>
                        <div class="cart-table-mobile">
                          <div class="cart-table-prd-price">
                            {% render 'main-cart-item-component-price', item: item %}
                          </div>
                          <div class="cart-table-prd-qty" data-node-mobile></div>
                          <div class="cart-table-prd-price-total">
                            {% render 'main-cart-item-component-final-price', item: item %}
                          </div>
                        </div>
                        <div class="cart-item__error hidden" id="Line-item-error-{{ item.index | plus: 1 }}" role="alert">
                          <small class="cart-item__error-text"></small>
                          {% render 'icon-alert' %}
                        </div>
                      </div>
                    {%- endfor -%}
                  </div>
                  <div class="mt-3 text-center">
                    <a href="{{ routes.all_products_collection_url }}" class="btn btn--grey"><span>{{ 'general.continue_shopping' | t }}</span></a>
                  </div>
                {%- endif -%}
              </div>
              <p class="visually-hidden" id="cart-live-region-text" aria-live="polite" role="status"></p>
              <p class="visually-hidden" id="shopping-cart-line-item-status" aria-live="polite" aria-hidden="true" role="status">{{ 'accessibility.loading' | t }}</p>
            </form>
          </div>
        </div>
        <div class="cart-page-column aside aside--sidebar aside--right aside--sticky--xl js-sticky-collision" role="complementary">
          <div class="aside-content">
            <div class="card-total bg-alt">
              <div class="card-total-inside" {{ block.shopify_attributes }}>
                {% for block in section.blocks %}
                  {%- case block.type -%}
                  {%- when '@app' -%}
                  {% render block %}
                  {%- when 'subtotal' -%}
                    <div class="js-contents-subtotal">
                      <h4 class="card-total-title">{{ 'theme.general.your_order' | t }}</h4>

                      {%- if cart.cart_level_discount_applications.size > 0 -%}
                      <div class="row mt-1">
                        <div class="col-auto">
                        <ul class="discounts list-unstyled" role="list" aria-label="{{ 'customer.order.discount' | t }}">
                          {%- for discount in cart.cart_level_discount_applications -%}
                            <li class="discounts__discount discounts__discount--end">
                              {%- render 'icon-discount' -%}
                              {{ discount.title }}
                              (-{{ discount.total_allocated_amount | money }})
                            </li>
                          {%- endfor -%}
                        </ul>
                        </div>
                      </div>
                      {%- endif -%}

                      <div class="row mt-1">
                        <div class="col-auto">
                          {%- if cart.taxes_included and shop.shipping_policy.body != blank -%}
                            {{ 'theme-sections.sections.cart.taxes_included_and_shipping_policy_html' | t: link: shop.shipping_policy.url }}
                            {%- elsif cart.taxes_included -%}
                            {{ 'theme-sections.sections.cart.taxes_included_but_shipping_at_checkout' | t }}
                            {%- elsif shop.shipping_policy.body != blank -%}
                            {{ 'theme-sections.sections.cart.taxes_and_shipping_policy_at_checkout_html' | t: link: shop.shipping_policy.url }}
                          {%- else -%}
                            {{ 'theme-sections.sections.cart.taxes_and_shipping_at_checkout' | t }}
                          {%- endif -%}
                        </div>
                      </div>

                      <div class="row card-total-summa mt-1">
                        <div class="col text-uppercase">{{ 'theme-sections.sections.cart.subtotal' | t }}:</div>
                        <div class="col-auto">{{ cart.total_price | money_with_currency }}</div>
                      </div>
                    </div>
                    {%- else -%}
                    <div class="row flex-column" {{ block.shopify_attributes }}>
                      

                      <h1 style="text-align: center; margin-bottom: 20px;">¿Cuando quieres recibir tu pedido?</h1>
                      <div class="calendar">
                          <div class="calendar-header">
                              <button id="prevBtn" class="calendar-btn">-</button>
                              <h2 id="currentMonth" class="textMonth"></h2>
                              <button id="nextBtn" class="calendar-btn">+</button>
                          </div>
                          <!-- Contenedor para los días de la semana -->
                          <div id="weekdays" class="calendar-weekdays"></div>
                          <div id="calendarBody" class="calendar-body"></div>
                      </div>

                      
                      
                      <!-- ## OCULTAR BOTONES DE PAGO GOOGLE PAY Y PAYAPL
                      {%- if additional_checkout_buttons -%}
                        <div class="col">
                          <div class="additional-checkout-buttons {% if settings.checkout_agreement %}shopify-payment-agree disabled{% endif %}">
                            {{ content_for_additional_checkout_buttons }}
                          </div>
                        </div>
                      {%- endif -%}
                      -->
                      
                      {%- if settings.checkout_agreement -%}
                        <div id="prd-block-agreement" class="prd-block-agreement custom-form" data-agree>
                          <input id="agreementCheckboxMaincart" class="js-agreement-checkbox" data-button=".shopify-payment-agree" name="agreementCheckboxProductPage" type="checkbox">
                          <label for="agreementCheckboxMaincart"><info-popup data-ajax="{{ routes.root_url }}?section_id=async-agreement-info" data-selector="#agreementInfo"><a href="#" class="modal-info-link">{{ 'theme.general.agree_to_the_terms' | t }}</a></info-popup></label>
                        </div>
                      {%- endif -%}
                      <div class="col  position-relative" style="margin-top: 10px;">
                        <button name="checkout"{% if cart == empty %} disabled{% endif %} form="cart" type="submit" data-button=".shopify-payment-agree" id="checkout" class="btn w-100 btn--cartpage-checkout {% if settings.checkout_agreement %}shopify-payment-agree disabled{% endif %}"><span>{{ 'theme-sections.sections.cart.checkout' | t }}</span></button>
                        {% if settings.checkout_agreement %}<info-popup data-ajax="{{ routes.root_url }}?section_id=async-agreement-info" data-selector="#agreementInfo"><span></span></info-popup>{% endif %}
                      </div>
                    </div>
                  {%- endcase -%}
                {% endfor %}
                <div id="cart-errors"></div>
              </div>
            </div>
            {%- if settings.show_cart_note -%}
              <div class="block-accordion">
                <form data-click="radio">
                  <div class="tab-accordion-item card-tab-accordion-item">
                    <input type="checkbox" name="tab-accordion" id="tabAccordion3" class="js-cart-page-note-checkbox">
                    <label for="tabAccordion3" data-text="{{ 'theme.general.add_note' | t }}">{{ 'theme.general.add_note' | t }}
                      <span></span></label>
                    <div class='tab-accordion-item-content js-set-height'>
                      <div class="tab-accordion-item-content-inside">
                        <p>{{ 'theme.general.note_description' | t }}</p>
                        <div class="mt-2"></div>
                        <div class="form-group">
                          <label>{{ 'theme.general.note' | t }}:</label>
                          <div class="form-control-wrap">
                            <cart-note>
                              <textarea-autosize data-maxheight="87"><textarea class="form-control js-textarea-autosize" name="note" form="cart"  placeholder="{{ 'theme-sections.sections.cart.note' | t }}">{{ cart.note }}</textarea></textarea-autosize>
                            </cart-note>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </form>
              </div>
            {%- endif -%}
            <div class="mt-2 text-center">
              <cart-clear-button>
                <a href="{{ routes.cart_clear_url }}" class="link-clear-cart btn-link btn-link--sm"><span class="icon-wrap">{% render 'icon-remove2' %}</span><span>{{ 'theme.general.clear_cart' | t }}</span>
                  <div class="loading-overlay hidden">
                    <div data-load="loading"></div>
                  </div>
                </a>
              </cart-clear-button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</cart-items>
<script src="{{ 'cart-page.js' | asset_url }}" defer></script>
{%- endunless -%}



<style>

  .textMonth {
    text-align: center;
    padding: 10px 0 0 0;
  }

  .calendar{
      width: 300px;
      background-color: #fff;
      margin: 0 auto;
      font-family: Arial, sans-serif;
      border-radius: 5px;
      box-shadow: 0 10px 29px -7px rgba(63,63,63,0.48);
  }

  .calendar-header{
      display: flex;
      align-items: center;
      justify-content: space-between;
  }

  .calendar-header button{
      background-color: transparent;
      border: none;
      cursor: pointer;
      font-size: 18px;
  }

  .calendar-body{
      display: grid;
      grid-template-columns: repeat(7,1fr);
  }

  .calendar-day{
      border: 1px solid #fff;
      border-radius: 50%;
      padding: 5px;
      margin: 5px;
      text-align: center;
      cursor: pointer;
  }

  .calendar-day:hover{
      background-color: #ddd !important;
      transition: background-color 0.3s ease;
  }

  .calendar-day.selected{
      border: 1px solid #003879d0;
      background-color: rgba(70,201,240);
  }

  .calendar-day.range{
      border: 1px solid #007900d0;
      background-color: rgba(86,238,86);
  }

  #prevBtn, #nextBtn{
      width: 40px;
      height: 40px;
      padding: 10px;
      margin: 0 10px 0 10px;
      border-radius: 50%;
      background-color: #fff;
      font-size: 24px;
  }

  #prevBtn:hover{
      background-color: #ddd !important;
      transition: background-color 0.3s ease;
  }

  #nextBtn:hover{
      background-color: #ddd !important;
      transition: background-color 0.3s ease;
  }

  #currentMonth{
      font-family: 'Poppins';
      font-size: 18px;
  }

  .calendar-day.today {
  background-color: #ff0; /* Fondo amarillo para el día actual */
  }

  .calendar-day.selected {
    background-color: var(--button-bg-grey);
    color: white;
  }

  .calendar-day.past-date {
  color: #ccc; /* Color gris para los días pasados */
  pointer-events: none; /* Deshabilitar clic en días pasados */
  }

  .calendar-weekdays {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    background-color: #f5f5f5;
    text-align: center;
    font-weight: bold;
    padding: 10px 0;
  }
  
  .calendar-weekdays .weekday {
      padding: 5px 0;
  }

  .calendar-day.today {
    background-color: #ff0; /* Fondo amarillo para el día actual */
    cursor: not-allowed;
    pointer-events: none; /* Deshabilita la selección */
  }


</style>
<script>
  //Lógica calendario nuevo
  let serverDiaSemana;
  let serverHora;
  let serverVacaciones;
  let cargandoRecargo = false;

  //Para probar distintas horas
  const testMode = false;
  let testDate = new Date(2024, 7, 20, 16, 0);

  // Actualizamos la función para que solo llame a renderCalendar cuando serverHora esté disponible.
  async function testProxy() {
    try {
      const response = await fetch("https://www.comprarhieloseco.es/apps/proxytest", {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(`Error: ${errorData.error}`);
      }

      const data = await response.json();
      console.log(data.jsonData);
      const { diaSemana, hora, vacaciones } = data.jsonData;
      serverDiaSemana = Number(diaSemana);
      serverHora = hora;
      serverVacaciones = JSON.parse(vacaciones);
      console.log('días vacaciones: ', serverVacaciones)

      // Ahora que tenemos serverHora, llamamos a renderCalendar.
      renderCalendar();

    } catch (error) {
      console.error('Error fetching data:', error);
    }
  }

  testProxy();

  const currentDate = testMode ? testDate : new Date();
  //console.log('Hora actual:', currentDate)
  let currentMonth = currentDate.getMonth();
  let currentYear = currentDate.getFullYear();
  let selectedDate = null; // Para almacenar la fecha seleccionada

  const calendarBody = document.getElementById('calendarBody');
  const currentMonthElement = document.getElementById('currentMonth');

  const prevBtn = document.getElementById('prevBtn');
  const nextBtn = document.getElementById('nextBtn');

  //TODO: COMPROBAR SI ESTÁ EL RECARGO EN EL CARRITO PARA ELIMINARLO

  //TODO: VALIDACIÓN SI NO HA SELECCIONADO FECHA
  const checkoutButton = document.querySelector('#checkout');
  checkoutButton.style.pointerEvents = 'none';
  checkoutButton.addEventListener('click', validarCheckout);

  function validarCheckout() {
    if (selectedDate === null) {
      const contenedorCheckoutButton = document.querySelector('.cart__ctas');
      checkoutButton.style.flexDirection = 'column';
      const divMSJ = document.createElement("div");
      divMSJ.innerText = "Selecciona un día de entrega";
      contenedorCheckoutButton.appendChild(divMSJ);
    }
  }

  prevBtn.addEventListener('click', () => {
  currentMonth--;
  renderCalendar();
  });
  nextBtn.addEventListener('click', () => {
  currentMonth++;
  renderCalendar();
  });

  function parseDate(str) {
    const [day, month, year] = str.split('/').map(Number);
    return new Date(year, month - 1, day); // Restamos 1 al mes porque los meses en Date van de 0 a 11
  }


  function renderCalendar() {
    if (!serverHora) {
        console.warn("serverHora no está definida todavía.");
        return; // Salimos de la función si serverHora no está definida.
    }

    // Días de la semana
    const weekDays = ['L', 'M', 'M', 'J', 'V', 'S', 'D'];
    const weekDaysHTML = weekDays.map(day => `<div class="weekday">${day}</div>`).join('');
    document.getElementById('weekdays').innerHTML = weekDaysHTML;

    const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();
    let firstDayIndex = new Date(currentYear, currentMonth, 1).getDay();
    firstDayIndex = (firstDayIndex === 0) ? 6 : firstDayIndex - 1; // Ajustar para que lunes sea 0 y domingo 6

    currentMonthElement.textContent = new Date(currentYear, currentMonth).toLocaleDateString('default', { month: 'long', year: 'numeric' });

    let days = '';

    const currentHour = currentDate.getHours();
    const currentMinutes = currentDate.getMinutes();

    const objetoHoraLimite = new Date();
    const [cutOffHour, cutOffMinutes] = serverHora.split(":").map(Number); // Aseguramos que serverHora esté inicializada.
    objetoHoraLimite.setHours(cutOffHour);
    objetoHoraLimite.setMinutes(cutOffMinutes);

    // Convertir serverVacaciones a objetos Date
    const vacacionesDates = serverVacaciones.map(dateStr => parseDate(dateStr));

    // Añadir días vacíos antes del primer día del mes
    for (let i = 0; i < firstDayIndex; i++) {
        days += `<div class="calendar-day"></div>`;
    }

    for (let i = 1; i <= daysInMonth; i++) {
        const date = new Date(currentYear, currentMonth, i);
        const className = getDayClassName(date);
        const isToday = date.toDateString() === currentDate.toDateString();
        const isPastDate = date < currentDate && !isToday;
        const isSundayOrMonday = date.getDay() === 0 || date.getDay() === 1;

        const isVacationDay = vacacionesDates.some(vacationDate => 
            vacationDate.getDate() === date.getDate() &&
            vacationDate.getMonth() === date.getMonth() &&
            vacationDate.getFullYear() === date.getFullYear()
        );

        let isAfterCutoff = false;
        if (currentDate.getDate() === date.getDate() - 1 && (currentHour > cutOffHour || (currentHour === cutOffHour && currentMinutes > cutOffMinutes))) {
            isAfterCutoff = true;
        }

        if (isPastDate || isSundayOrMonday || isAfterCutoff || isVacationDay || isToday) {
            days += `<div class="calendar-day ${className} past-date">${i}</div>`;
        } else {
            days += `<div class="calendar-day ${className}" onclick="selectDate(${i})">${i}</div>`;
        }
    }

    calendarBody.innerHTML = days;
  }


  function selectDate(day) {
  selectedDate = new Date(currentYear, currentMonth, day);
  checkoutButton.style.pointerEvents = 'auto';

  console.log(`Selected date: ${formatDate(selectedDate)}`);
  console.log('dia semana:', serverDiaSemana)
  if (selectedDate.getDay() == serverDiaSemana) { 
    console.log('Has seleccionado un día con recargo', serverDiaSemana);

    getCartItems().then(cart => {
      let recargoExists = cart.items.some(item => item.variant_id === 49131205362003);
      if (!recargoExists) {
        addRecargoToCart();
      }
    });
  } else {
    updateCartNote();
  }
  renderCalendar();
  }

  async function updateCartNote() {
    async function updateProductProperties(lineItemId, quantity, properties) {
      console.log('Actualizando propiedades')
      const carritoActualizado = {
        'id': lineItemId,
        'quantity': quantity,
        'properties': {
          'Fecha de entrega': properties
        }
      }
      await fetch('/cart/change.js', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(carritoActualizado)
      })
      .then(response => response.json())
      .then(data => {
        console.log('Propiedades del producto actualizadas:', data);
        console.log(carritoActualizado)
        // Aquí puedes actualizar la UI o realizar alguna acción tras la actualización.
      })
      .catch(error => {
        console.error('Error al actualizar las propiedades del producto:', error);
      });
    }
    await fetch('/cart.js')
    .then(response => response.json())
    .then(data => {
      console.log(data);
      if (data.items.length > 0) {
        console.log(data.items[0]);
        const {key, quantity} = data.items[0]
        const propiedades = formatDate(selectedDate);

        console.log(key, quantity, propiedades)
        
        updateProductProperties(key, quantity, propiedades)

      } else {
        console.log('Tu carrito está vacío.');
      }
    })
    .catch(error => console.error('Error al obtener el carrito:', error));
  }

  

  async function addRecargoToCart() {
    console.log('Añadiendo el recargo');
    //BLOQUEO BOTÓN DE PAGO
    console.log(checkoutButton)
    checkoutButton.style.display = 'none';
    let formData = {
      'items': [{
        'id': 49131205362003,
        'quantity': 1,
        'properties': {'Fecha de Entrega': formatDate(selectedDate)}
      }]
    };

    await fetch(window.Shopify.routes.root + 'cart/add.js', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(formData)
    })
    .then(response => response.json())
    .then(data => {
      console.log('Cart updated:', data);
      cargandoRecargo = false;
      checkoutButton.style.display = 'block';
    })
    .catch((error) => {
      console.error('Error:', error);
    });
  }

  function formatDate(date) {
    const day = String(date.getDate()).padStart(2, '0'); // Obtiene el día y lo formatea a dos dígitos
    const month = String(date.getMonth() + 1).padStart(2, '0'); // Obtiene el mes y lo formatea a dos dígitos (recordando que los meses van de 0 a 11)
    const year = date.getFullYear(); // Obtiene el año

    return `${day}/${month}/${year}`; // Devuelve la fecha en formato "dd/mm/yyyy"
  }

  async function getCartItems() {
    try {
      const response = await fetch(window.Shopify.routes.root + 'cart.js');
      const data = await response.json();
      return data;
    } catch (error) {
      console.error('Error:', error);
    }
  }

  function getDayClassName(date) {
    if (date.toDateString() === currentDate.toDateString()) {
        return 'today';
    }
    if (selectedDate && date.toDateString() === selectedDate.toDateString()) {
        return 'selected';
    }
    return '';
  }

  //Desaparecer calendario anterior

  // Selecciona el contenedor donde se espera que aparezca el elemento
  const textarea = document.querySelector('.form-control.js-textarea-autosize[name="note"]');
  textarea.value = '';
  const observerTarget = document.querySelector('body'); // Cambia 'body' por el contenedor adecuado
  
  // Crea una instancia de MutationObserver y define lo que debe hacer cuando detecte cambios
  const observer = new MutationObserver((mutations) => {
    mutations.forEach((mutation) => {
      // Si el nodo añadido es el que buscamos, lo eliminamos
      if (mutation.addedNodes.length > 0) {
        mutation.addedNodes.forEach((node) => {
          if (node.nodeType === 1 && node.matches('.rmdp-wrapper.rmdp-shadow.uiDeliveryCalendar.oddCalanderOffset')) {
            node.style.display = 'none';
            observer.disconnect(); // Deja de observar una vez que se encuentra el elemento
          }
        });
      }
    });
  });
  
  // Configura las opciones del observer
  const observerConfig = { childList: true, subtree: true };
  
  // Inicia la observación
  observer.observe(observerTarget, observerConfig);


</script>

{% schema %}
{
  "name": "t:sections.main-cart-items.name",
  "settings": [
    {
      "type": "header",
      "content": "t:sections.main-cart-items.settings.content.section_width"
    },
    {
      "type": "select",
      "id": "section_width",
      "label": "Select width source",
      "options": [
        {
          "value": "global",
          "label": "Use store width"
        },
        {
          "value": "custom",
          "label": "Custom width"
        }
      ],
      "default": "global",
      "info": "Store width you can set in Theme Settings / General"
    },
    {
      "type": "range",
      "id": "container_max_width",
      "min": 1178,
      "max": 1978,
      "step": 8,
      "unit": "px",
      "label": "Custom width",
      "default": 1178,
      "info": "The specified width may differ from the actual width of the section because this section uses a smart grid for the most successful arrangement of columns in rows and for best view. Columns are not scaled, but added when the section width is increased."
    },
    {
      "type": "header",
      "content": "t:sections.main-cart-items.settings.content.box_margin"
    },
    {
      "type": "range",
      "id": "spacing_sections",
      "min": 0,
      "max": 200,
      "step": 2,
      "unit": "px",
      "label": "t:sections.main-cart-items.settings.spacing_sections.label",
      "default": 100
    },
    {
      "type": "checkbox",
      "id": "use_global_desktop_space",
      "label": "t:sections.main-cart-items.settings.use_global_desktop_space.label",
      "default": true,
      "info": "t:sections.main-cart-items.settings.use_global_desktop_space.info"
    },
    {
      "type": "range",
      "id": "spacing_sections_mobile",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "px",
      "label": "t:sections.main-cart-items.settings.spacing_sections_mobile.label",
      "default": 70
    },
    {
      "type": "checkbox",
      "id": "use_global_mobile_space",
      "label": "t:sections.main-cart-items.settings.use_global_mobile_space.label",
      "default": true,
      "info": "t:sections.main-cart-items.settings.use_global_mobile_space.info"
    },
    {
      "type": "header",
      "content": "t:sections.main-cart-items.settings.content.box_padding.content",
      "info": "t:sections.main-cart-items.settings.content.box_padding.info"
    },
    {
      "type": "range",
      "id": "spacing_padding_sections",
      "min": 0,
      "max": 200,
      "step": 2,
      "unit": "px",
      "label": "t:sections.main-cart-items.settings.spacing_padding_sections.label",
      "default": 100
    },
    {
      "type": "checkbox",
      "id": "use_global_desktop_space_padding",
      "label": "t:sections.main-cart-items.settings.use_global_desktop_space_padding.label",
      "default": true,
      "info": "t:sections.main-cart-items.settings.use_global_desktop_space_padding.info"
    },
    {
      "type": "range",
      "id": "spacing_padding_sections_mobile",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "px",
      "label": "t:sections.main-cart-items.settings.spacing_padding_sections_mobile.label",
      "default": 70
    },
    {
      "type": "checkbox",
      "id": "use_global_mobile_space_padding",
      "label": "t:sections.main-cart-items.settings.use_global_mobile_space_padding.label",
      "default": true,
      "info": "t:sections.main-cart-items.settings.use_global_mobile_space_padding.info"
    },
    {
      "type": "header",
      "content": "t:sections.main-cart-items.settings.content.box_background"
    },
    {
      "type": "checkbox",
      "id": "background",
      "label": "t:sections.main-cart-items.settings.background.label",
      "default": false,
      "info": "t:sections.main-cart-items.settings.background.info"
    },
    {
      "type": "header",
      "content": "t:sections.main-cart-items.settings.content.general"
    },
    {
      "type": "checkbox",
      "id": "show_vendor",
      "default": false,
      "label": "t:sections.main-cart-items.settings.show_vendor.label"
    }
  ],
  "blocks": [
    {
      "type": "subtotal",
      "name": "t:sections.main-cart-items.blocks.subtotal.name",
      "limit": 1
    },
    {
      "type": "buttons",
      "name": "t:sections.main-cart-items.blocks.buttons.name",
      "limit": 1
    },
    {
      "type": "@app"
    }
  ]
}
{% endschema %}